val x = play {
  // RandSeed.ir(trig = 1, seed = 56789.0)
  val bRF_0         = BRF.ar(670.28094, freq = -0.0029116, rq = -7.393255)
  val inL           = GbmanL.ar(freq = 746.1969, xi = 419.73846, yi = -2526.418)
  val ramp          = Ramp.ar(23.868387, dur = 695.37335)
  val freeVerb2     = FreeVerb2.ar(inL = inL, inR = ramp, mix = 4073.4182, room = 23.868387, damp = 0.00788784)
  val bBandStop_0   = BBandStop.ar(0.00788784, freq = 0.006726554, bw = 637.2363)
  val a             = Formant.ar(fundFreq = 325.59705, formFreq = bBandStop_0, bw = 0.0015142808)
  val in_0          = BBandStop.ar(0.00648538, freq = 0.00648538, bw = 637.2363)
  val trig_0        = PanAz.ar(numChannels = 1, in = in_0, pos = -0.0029116, level = 412.14645, width = 3.0152974, orient = 0.36766747)
  val setResetFF    = SetResetFF.ar(trig = trig_0, reset = 12.325766)
  val latoocarfianL = LatoocarfianL.ar(freq = 0.00648538, a = a, b = 12.325766, c = 695.37335, d = bBandStop_0, xi = 107.30127, yi = 4073.4182)
  val dust2         = Dust2.ar(0.00788784)
  val in_1          = FBSineN.ar(freq = 637.2363, im = 0.006726554, fb = -0.0029116, a = dust2, c = 637.2363, xi = dust2, yi = dust2)
  val pan4          = Pan4.ar(in_1, xpos = 0.006726554, ypos = 413.78714, level = 0.0015142808)
  val bBandStop_1   = BBandStop.ar(0.00788784, freq = 0.00648538, bw = 637.2363)
  val linCongL      = LinCongL.ar(freq = bBandStop_1, a = 637.2363, c = 0.00648538, m = 0.00788784, xi = -10.767268)
  val density_0     = StandardN.ar(freq = 3.0152974, k = 0.0015142808, xi = bBandStop_1, yi = -962.5887)
  val freq_0        = Dust2.ar(density_0)
  val bRF_1         = BRF.ar(in_0, freq = freq_0, rq = 0.00788784)
  val gbmanL        = GbmanL.ar(freq = -10.767268, xi = 395.79254, yi = 395.79254)
  val brownNoise    = BrownNoise.ar(ramp)
  val hPZ1          = HPZ1.ar(9.444879E-4)
  val mix_0         = Mix(Seq[GE](hPZ1, brownNoise, gbmanL, bRF_1, linCongL, pan4, latoocarfianL, setResetFF, freeVerb2, bRF_0))
  val mono          = Mix.Mono(mix_0)
  val leak = LeakDC.ar(mono)
  val bad = CheckBadValues.ar(leak, post = 0)
  val gate = Gate.ar(leak, bad sig_== 0)
  val lim = Pan2.ar(Limiter.ar(gate)) * "amp".kr(0.05) // * DelayN.ar(Line.ar(0, 1, 1), 0.2, 0.2)
  Out.ar(0, lim)
}