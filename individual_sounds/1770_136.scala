def ConfigOut(in: GE) = Out.ar(0, Pan2.ar(Limiter.ar(LeakDC.ar(in))))

play {
  // RandSeed.ir(trig = 1, seed = 56789.0)
  val saw           = Saw.ar(0.42893913)
  val decodeB2      = DecodeB2.ar(numChannels = 1, w = 30.324293, x = 0.42893913, y = saw, orient = 0.006726554)
  val rLPF          = RLPF.ar(0.09296243, freq = 13.354841, rq = 0.020043306)
  val phase         = EnvGen_Linen(413.78714, -0.0029116, 0.0015142808, 3.0152974, 413.78714, 0.09296243, rLPF, 2.529529E-4)
  val freq_0        = Crackle.ar(0.020043306)
  val gbmanL_0      = GbmanL.ar(freq = freq_0, xi = 9.444879E-4, yi = 413.78714)
  val biPanB2       = BiPanB2.ar(inA = 0.36766747, inB = 0.36766747, azimuth = saw, level = 0.024061674)
  val bw            = Dust2.ar(1.0)
  val trig_0        = BBandStop.ar(0.004496857, freq = 9.865969, bw = bw)
  val phasor        = Phasor.ar(trig = trig_0, speed = 0.016507613, lo = 0.09436134, hi = -0.0029116, resetVal = 40.58693)
  val gbmanL_1      = GbmanL.ar(freq = 419.0, xi = -0.0029116, yi = 0.020043306)
  val sinOsc        = SinOsc.ar(freq = 0.005705428, phase = phase)
  val bRF           = BRF.ar(0.09296243, freq = -0.0029116, rq = 0.42893913)
  val runningMin    = RunningMin.ar(-0.0029116, trig = -2029.8915)
  val pluck         = Pluck.ar(2.4924371, trig = -2029.8915, maxDelayTime = 0.020043306, delayTime = 361.50327, decayTime = 413.78714, coeff = -0.0029116)
  val mantissaMask  = MantissaMask.ar(0.09296243, bits = 0.09436134)
  val mix           = Mix(Seq[GE](mantissaMask, pluck, runningMin, bRF, sinOsc, gbmanL_1, phasor, biPanB2, gbmanL_0, decodeB2))
  val mono          = Mix.Mono(mix)
  ConfigOut(mono)
}
