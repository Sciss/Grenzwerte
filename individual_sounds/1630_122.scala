def ConfigOut(in: GE) = Out.ar(0, Pan2.ar(Limiter.ar(LeakDC.ar(in))))

play {
  // RandSeed.ir(trig = 1, seed = 56789.0)
  val rHPF          = RHPF.ar(0.0030590198, freq = -2726.2134, rq = 0.46727282)
  val maxDelayTime  = Phasor.ar(trig = -0.4713431, speed = 633.6489, lo = rHPF, hi = 635.6367, resetVal = 790.3602)
  val delayC        = DelayC.ar(181.86774, maxDelayTime = maxDelayTime, delayTime = 635.6367)
  val blip          = Blip.ar(freq = delayC, numHarm = 0.007360279)
  val gbmanN_0      = GbmanN.ar(freq = 0.0015142808, xi = -87.291245, yi = 0.0025307478)
  val linCongC      = LinCongC.ar(freq = 6.5339446, a = 1026.963, c = -35.502, m = delayC, xi = 0.0015142808)
  val dust2         = Dust2.ar(6.5339446)
  val a_0           = RHPF.ar(0.0030590198, freq = -2726.2134, rq = 0.46727282)
  val leastChange   = LeastChange.ar(a = rHPF, b = 191.20721)
  val phasor        = Phasor.ar(trig = 191.20721, speed = 0.72875875, lo = -87.291245, hi = 419.73846, resetVal = -2726.2134)
  val gbmanN_1      = GbmanN.ar(freq = 0.0028211304, xi = 1.2, yi = 0.005730466)
  val numHarm_0     = HenonL.ar(freq = 0.0015142808, a = a_0, b = 790.3602, x0 = -87.291245, x1 = 0.005730466)
  val level         = Blip.ar(freq = 1144.4446, numHarm = numHarm_0)
  val in_0          = level <= 0.0028211304
  val freq_0        = Pan2.ar(0.0015142808, pos = 695.37335, level = level)
  val lo_0          = BRF.ar(646.1591, freq = freq_0, rq = 0.46727282)
  val tExpRand      = TExpRand.ar(lo = lo_0, hi = dust2, trig = phasor)
  val yi_0          = Lag3UD.ar(in_0, timeUp = 0.00788784, timeDown = 191.20721)
  val decay         = Decay.ar(0.00788784, time = phasor)
  val in_1          = Klang.ar(specs = delayC, freqScale = blip, freqOffset = blip)
  val hasher        = Hasher.ar(in_1)
  val gbmanL        = GbmanL.ar(freq = 0.629519, xi = dust2, yi = yi_0)
  val mix           = Mix(Seq[GE](gbmanL, hasher, decay, tExpRand, gbmanN_1, leastChange, linCongC, gbmanN_0))
  val mono          = Mix.Mono(mix)
  ConfigOut(mono)
}
