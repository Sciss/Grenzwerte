val x = play {
  // RandSeed.ir(trig = 1, seed = 56789.0)
  val maxDelayTime  = Phasor.ar(trig = 0.0015142808, speed = 633.6489, lo = 0.0030590198, hi = 635.6367, resetVal = 790.3602)
  val m             = DelayC.ar(419.73846, maxDelayTime = maxDelayTime, delayTime = 635.6367)
  val gbmanN_0      = GbmanN.ar(freq = 0.0015142808, xi = -87.291245, yi = 0.0025307478)
  val linCongC      = LinCongC.ar(freq = 6.5339446, a = 1026.963, c = -35.502, m = m, xi = 0.0015142808)
  val leastChange   = LeastChange.ar(a = 0.0030610675, b = 191.20721)
  val phasor        = Phasor.ar(trig = 191.20721, speed = 0.73717403, lo = -87.291245, hi = 419.73846, resetVal = -2726.2134)
  val gbmanN_1      = GbmanN.ar(freq = 0.005730466, xi = 1.2, yi = 0.0030590198)
  val x0            = RHPF.ar(0.0030590198, freq = -2726.2134, rq = 0.46727282)
  val henonL        = HenonL.ar(freq = 0.0015142808, a = -87.291245, b = 790.3602, x0 = x0, x1 = 0.005730466)
  val level         = Sweep.ar(trig = 1144.4446, speed = henonL)
  val timeDown      = level <= 0.0030590198
  val freq_0        = Lag3UD.ar(191.20721, timeUp = 0.00788784, timeDown = timeDown)
  val hi_0          = Dust2.ar(6.5339446)
  val tExpRand      = TExpRand.ar(lo = henonL, hi = hi_0, trig = phasor)
  val freq_1        = Pan2.ar(0.0015142808, pos = 695.37335, level = level)
  val delayC        = DelayC.ar(419.73846, maxDelayTime = maxDelayTime, delayTime = 635.6367)
  val bRF           = BRF.ar(695.37335, freq = freq_1, rq = delayC)
  val decay         = Decay.ar(0.00788784, time = phasor)
  val blip          = Blip.ar(freq = delayC, numHarm = 0.007360279)
  val in_0          = Klang.ar(specs = delayC, freqScale = blip, freqOffset = blip)
  val hasher        = Hasher.ar(in_0)
  val gbmanL        = GbmanL.ar(freq = freq_0, xi = delayC, yi = 0.629519)
  val a2K           = A2K.kr(646.1591)
  val mix           = Mix(Seq[GE](a2K, gbmanL, hasher, decay, bRF, tExpRand, gbmanN_1, leastChange, linCongC, gbmanN_0))
  val mono          = Mix.Mono(mix)
  val lim = Pan2.ar(Limiter.ar(LeakDC.ar(mono))) * "amp".kr(0.1)
  Out.ar(0, lim)
}
